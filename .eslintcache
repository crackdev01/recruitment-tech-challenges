[{"E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\index.js":"1","E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\components\\Notification.js":"2","E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\components\\controls\\Checkbox.js":"3","E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\components\\controls\\Input.js":"4","E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\components\\PageHeader.js":"5","E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\components\\controls\\RadioGroup.js":"6","E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\components\\SideMenu.js":"7","E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\App\\App.js":"8","E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\pages\\Employees\\Employees.js":"9","E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\components\\controls\\Button.js":"10"},{"size":476,"mtime":1714347510470,"results":"11","hashOfConfig":"12"},{"size":952,"mtime":1714347510465,"results":"13","hashOfConfig":"12"},{"size":789,"mtime":1714347510466,"results":"14","hashOfConfig":"12"},{"size":475,"mtime":1714347510469,"results":"15","hashOfConfig":"12"},{"size":1133,"mtime":1714347510465,"results":"16","hashOfConfig":"12"},{"size":671,"mtime":1714347510469,"results":"17","hashOfConfig":"12"},{"size":1790,"mtime":1714382520752,"results":"18","hashOfConfig":"12"},{"size":1436,"mtime":1714381389095,"results":"19","hashOfConfig":"12"},{"size":6658,"mtime":1714382090985,"results":"20","hashOfConfig":"12"},{"size":676,"mtime":1714347510466,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"xcute5",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\index.js",[],["44","45"],"E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\components\\Notification.js",[],"E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\components\\controls\\Checkbox.js",[],"E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\components\\controls\\Input.js",[],"E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\components\\PageHeader.js",[],"E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\components\\controls\\RadioGroup.js",[],"E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\components\\SideMenu.js",[],"E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\App\\App.js",[],"E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\pages\\Employees\\Employees.js",["46"],"import React, { useState, useEffect } from 'react';\r\nimport EmployeeForm from './EmployeeForm';\r\nimport PageHeader from '../../components/PageHeader';\r\nimport PeopleOutlineTwoToneIcon from '@material-ui/icons/PeopleOutlineTwoTone';\r\nimport {\r\n  Paper,\r\n  makeStyles,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Toolbar,\r\n  InputAdornment,\r\n} from '@material-ui/core';\r\nimport useTable from '../../components/useTable';\r\nimport * as employeeService from '../../services/employeeService';\r\nimport Controls from '../../components/controls/Controls';\r\nimport { Search } from '@material-ui/icons';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Popup from '../../components/Popup';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Notification from '../../components/Notification';\r\nimport ConfirmDialog from '../../components/ConfirmDialog';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  pageContent: {\r\n    margin: theme.spacing(5),\r\n    padding: theme.spacing(3),\r\n  },\r\n  searchInput: {\r\n    width: '75%',\r\n  },\r\n  newButton: {\r\n    position: 'absolute',\r\n    right: '10px',\r\n  },\r\n}));\r\n\r\nconst headCells = [\r\n  { id: 'fullName', label: 'Employee Name' },\r\n  { id: 'email', label: 'Email Address (Personal)' },\r\n  { id: 'mobile', label: 'Mobile Number' },\r\n  { id: 'department', label: 'Department' },\r\n  { id: 'actions', label: 'Actions', disableSorting: true },\r\n];\r\n\r\nexport default function Employees(props) {\r\n  const classes = useStyles();\r\n  const {department} = props;\r\n  const [recordForEdit, setRecordForEdit] = useState(null);\r\n  const [records, setRecords] = useState(employeeService.getAllEmployees());\r\n  const [filterFn, setFilterFn] = useState({\r\n    fn: (items) => {\r\n      return items;\r\n    },\r\n  });\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n  const [notify, setNotify] = useState({\r\n    isOpen: false,\r\n    message: '',\r\n    type: '',\r\n  });\r\n  const [confirmDialog, setConfirmDialog] = useState({\r\n    isOpen: false,\r\n    title: '',\r\n    subTitle: '',\r\n  });\r\n  const [isChangeData, setIsChangeData] = useState(false)\r\n\r\n  const {\r\n    TblContainer,\r\n    TblHead,\r\n    TblPagination,\r\n    recordsAfterPagingAndSorting,\r\n  } = useTable(records, headCells, filterFn);\r\n\r\n  useEffect(() => {\r\n    setRecords(\r\n      department.length > 0 && department[0] != 0\r\n        ? employeeService\r\n            .getAllEmployees()\r\n            .filter((employee) =>\r\n              department.includes(employee.departmentId)\r\n            )\r\n        : employeeService.getAllEmployees()\r\n    );\r\n    setIsChangeData(false)\r\n  }, [department, isChangeData])\r\n\r\n  const handleSearch = (e) => {\r\n    let target = e.target;\r\n    setFilterFn({\r\n      fn: (items) => {\r\n        if (target.value === '') return items;\r\n        else\r\n          return items.filter((x) =>\r\n            x.fullName.toLowerCase().includes(target.value.toLowerCase())\r\n          );\r\n      },\r\n    });\r\n  };\r\n\r\n  const addOrEdit = (employee, resetForm) => {\r\n    if (employee.id === 0) employeeService.insertEmployee(employee);\r\n    else employeeService.updateEmployee(employee);\r\n    resetForm();\r\n    setRecordForEdit(null);\r\n    setOpenPopup(false);\r\n    setIsChangeData(true);\r\n    setNotify({\r\n      isOpen: true,\r\n      message: 'Submitted Successfully',\r\n      type: 'success',\r\n    });\r\n  };\r\n\r\n  const openInPopup = (item) => {\r\n    setRecordForEdit(item);\r\n    setOpenPopup(true);\r\n  };\r\n\r\n  const onDelete = (id) => {\r\n    setConfirmDialog({\r\n      ...confirmDialog,\r\n      isOpen: false,\r\n    });\r\n    employeeService.deleteEmployee(id);\r\n    setIsChangeData(true);\r\n    setNotify({\r\n      isOpen: true,\r\n      message: 'Deleted Successfully',\r\n      type: 'success',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageHeader\r\n        title='New Employee'\r\n        subTitle='Form design with validation'\r\n        icon={<PeopleOutlineTwoToneIcon fontSize='large' />}\r\n      />\r\n      <Paper className={classes.pageContent}>\r\n        <Toolbar>\r\n          <Controls.Input\r\n            label='Search Employees'\r\n            className={classes.searchInput}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position='start'>\r\n                  <Search />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n            onChange={handleSearch}\r\n          />\r\n          <Controls.Button\r\n            text='Add New'\r\n            variant='outlined'\r\n            startIcon={<AddIcon />}\r\n            className={classes.newButton}\r\n            onClick={() => {\r\n              setOpenPopup(true);\r\n              setRecordForEdit(null);\r\n            }}\r\n          />\r\n        </Toolbar>\r\n        <TblContainer>\r\n          <TblHead />\r\n          <TableBody>\r\n            {recordsAfterPagingAndSorting().map((item) => (\r\n              <TableRow key={item.id}>\r\n                <TableCell>{item.fullName}</TableCell>\r\n                <TableCell>{item.email}</TableCell>\r\n                <TableCell>{item.mobile}</TableCell>\r\n                <TableCell>{item.department}</TableCell>\r\n                <TableCell>\r\n                  <Controls.ActionButton\r\n                    color='primary'\r\n                    onClick={() => {\r\n                      openInPopup(item);\r\n                    }}\r\n                  >\r\n                    <EditOutlinedIcon fontSize='small' />\r\n                  </Controls.ActionButton>\r\n                  <Controls.ActionButton\r\n                    color='secondary'\r\n                    onClick={() => {\r\n                      setConfirmDialog({\r\n                        isOpen: true,\r\n                        title: 'Are you sure you want to delete this record?',\r\n                        subTitle: \"You can't undo this operation\",\r\n                        onConfirm: () => {\r\n                          onDelete(item.id);\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    <CloseIcon fontSize='small' />\r\n                  </Controls.ActionButton>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </TblContainer>\r\n        <TblPagination />\r\n      </Paper>\r\n      <Popup\r\n        title='Employee Form'\r\n        openPopup={openPopup}\r\n        setOpenPopup={setOpenPopup}\r\n      >\r\n        <EmployeeForm recordForEdit={recordForEdit} addOrEdit={addOrEdit} />\r\n      </Popup>\r\n      <Notification notify={notify} setNotify={setNotify} />\r\n      <ConfirmDialog\r\n        confirmDialog={confirmDialog}\r\n        setConfirmDialog={setConfirmDialog}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","E:\\Home Assignment\\Robertics\\recruitment-tech-challenges\\src\\components\\controls\\Button.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":79,"column":46,"nodeType":"53","messageId":"54","endLine":79,"endColumn":48},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]